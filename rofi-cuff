#!/bin/sh
#
# Rofi wrapper for cuff. Use the Jackett search API to find torrents.
# Requires cuff, jq, rofi

err_msg_exit() {
    # Print an error to stderr and exit.
    printf "%s\n" "$*" >&2
    exit 1
}

# Check dependencies
type cuff > /dev/null || err_msg_exit "'cuff' not found."
type jq > /dev/null || err_msg_exit "'jq' not found."
type rofi > /dev/null || err_msg_exit "'rofi' not found."

# User prompt commands
INPUT_CMD=(rofi -dmenu -show -p "Search" -l 0 -i)
MENU_CMD=(rofi -dmenu -show -p "Select" -i)

# Figure out which actions are available
# Note: please feel free to open a PR to add common use cases.
# https://github.com/loiccoyle/rofi-cuff
OPEN_URL="${BROWSER:-${OPENER:-xdg-open}}"
OPEN_TORRENT="${OPENER:-xdg-open}"
ACTIONS=()
type "$OPEN_TORRENT" > /dev/null 2>&1 && ACTIONS+=("download")
type "$OPEN_URL" > /dev/null 2>&1 && ACTIONS+=("open")
type webtorrent > /dev/null 2>&1 && ACTIONS+=("stream")

[ "${#ACTIONS[@]}" = 0 ] && err_msg_exit "No actions."

# Action definitions
download() {
    # Download the torrent.
    $OPEN_TORRENT "$(printf "%s" "$1" | jq -r ".MagnetUri//.Link")" &
}

open() {
    # Open the torrent's web page.
    local url
    url="$(printf "%s" "$1" | jq -r ".Guid//.Details")"
    if [ "$url" = "null" ]; then
        printf "Could not get link." >&2
    else
        $OPEN_URL "$url" &
    fi
}

stream() {
    # Stream the torrent with webtorrent.
    local magnet
    magnet="$(printf "%s" "$1" | jq -r ".MagnetUri//.Link")"
    $TERMINAL --hold -e webtorrent "$magnet" --port 9827 --mpv --not-on-top &
}

# Defaults
TRACKER_ARGS=()
CATEGORY_ARGS=()
STDIN=""
CUFF_ARGS=()

SUBMENU=("Search" "Restrict to trackers" "Restrict to categories")
# Submenus
trackers() {
    # Restrict search to provided trackers.
    local IFS=$'\n'
    local trackers
    local indexers
    indexers="$(cuff "${CUFF_ARGS[@]}" indexers)" || exit
    trackers=($(printf "%s" "$indexers" | "${MENU_CMD[@]}" -multi-select -mesg 'ESC to clear'))

    [ "${#trackers[@]}" -gt 0 ] && TRACKER_ARGS=($(printf -- "-t %s " ${trackers[@]})) || TRACKER_ARGS=()
}

categories() {
    # Restrict search to provided categories.
    local IFS=$'\n'
    local categories
    categories=($(cuff categories | "${MENU_CMD[@]}" -multi-select -mesg 'ESC to clear'))
    [ "${#categories[@]}" -gt 0 ] && CATEGORY_ARGS=($(printf -- "-c %s " ${categories[@]})) || CATEGORY_ARGS=()
}

search() {
    # Get search query, create menu and run actions.
    local results
    if [ -n "$STDIN" ]; then
        # Results from stdin
        results="$(cat)"
    else
        # Prompt for search
        local query
        query="$("${INPUT_CMD[@]}")"
        results="$(cuff "${CUFF_ARGS[@]}" search -s "Peers" "${TRACKER_ARGS[@]}" "${CATEGORY_ARGS[@]}" "$query")" || exit
    fi

    local IFS=$'\n'
    declare -a results_table
    local selected_indices
    results_table=($(\
        printf "%s" "$results" | \
        jq -r '.[] | "\(.Title[:60])\t\(.TrackerId)\t\(.Size)\tðŸ”½\(.Seeders)\tðŸ”¼\(.Peers)\t\(.PublishDate[:10])"' | \
        numfmt --field 3 --to=iec -d$'\t' --invalid=ignore | \
        column --table --separator=$'\t' \
        ))

    selected_indices="$(printf "%s\n" "${results_table[@]}" | "${MENU_CMD[@]}" -format 'i' -multi-select -mesg "Shift+Enter: Multiple select")" || exit

    # Iterate over selected torrents and run the selected action.
    for index in $selected_indices; do
        local selected_torrent
        local selected_torrent_string
        selected_torrent="$(printf "%s" "$results" | jq ".[$index]")"
        selected_torrent_string="${results_table[$index]}"
        case "$(printf "%s\n" "${ACTIONS[@]}" | "${MENU_CMD[@]}" -no-custom -l ${#ACTIONS[@]} -mesg "$selected_torrent_string")" in
            "download" )
                download "$selected_torrent"
                ;;
            "open" )
                open "$selected_torrent"
                ;;
            "stream" )
                stream "$selected_torrent"
                ;;
        esac
    done
}

has_jackett(){
    # Check to see if the jackett service file is installed.
    systemctl list-unit-files jackett.service > /dev/null
}

check_jackett() {
    # Check if the Jackett service is active.
    systemctl is-active jackett.service > /dev/null
}

stop_jackett() {
    # Stop the jackett service if it is running.
    check_jackett && sudo systemctl stop jackett.service > /dev/null
}

wait_jackett() {
    # If we started the server, wait until Jackett is responsive. Max of 5s.
    if [ -n "$START" ]; then
        for((i=0; i < 10; i++)); do
            { cuff "${CUFF_ARGS[@]}" config > /dev/null 2>&1 && break; } || sleep 0.5
        done
    fi
}


# Handle the starting and stopping ourselves as it is more responsive to do it the background now than later
CUFF_ARGS=()
START=""
while getopts ":hsk" opt; do
    case $opt in
        "h" )
            CMD_NAME="$(basename "$0")"
            # Stop execution early if help msg is requested.
            # Just show the help msg for the main cuff cmd.
            printf "\
Use \"-\" to read the json Jackett response from stdin e.g.:\n\n\
$ cuff search big buck bunny | %s -\n\n\
Otherwise, %s passes any provided options to the main cuff command:\n\n" "$CMD_NAME" "$CMD_NAME"
            cuff -h | head -n12
            exit 0
            ;;
        "s" )
            # Start the jackett service in the background
            if has_jackett; then
                check_jackett || sudo systemctl start jackett.service > /dev/null &
                START=1
            else
                err_msg_exit "Jackett service file not found."
            fi
            ;;
        "k" )
            # Add a trap on exit to kill jackett service
            { has_jackett && trap stop_jackett EXIT; } || err_msg_exit "Jackett service file not found."
            ;;
        * )
            CUFF_ARGS+=(-$OPTARG)
    esac
done
shift $((OPTIND-1))

# Pipe a cuff search json output straight to rofi-jackett
# e.g. $ cuff search big buck bunny | rofi-jackett -
if [ "$1" = "-" ]; then
    STDIN=1
    search
    exit
fi

# Main loop
DONE=""
while [ -z "$DONE" ]; do
    # Add a msg to the main menu to indicate the selected trackers/categories
    if [ "${#TRACKER_ARGS[@]}" -gt 0 ] || [ "${#CATEGORY_ARGS[@]}" -gt 0 ]; then
        MESG=(-mesg "Cuff search args: ${TRACKER_ARGS[*]}${CATEGORY_ARGS[*]}")
    else
        MESG=()
    fi

    SELECTION="$(\
        printf "%s\n" "${SUBMENU[@]}" | \
        "${MENU_CMD[@]}" -no-custom -l ${#SUBMENU[@]} "${MESG[@]}"
        )" || exit $?

    case "$SELECTION" in
        "Restrict to trackers" )
            wait_jackett
            trackers
            ;;
        "Restrict to categories" )
            categories
            ;;
        "Search" )
            wait_jackett
            search
            DONE=1
            ;;
    esac
done
