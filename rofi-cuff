#!/bin/sh
#
# Rofi wrapper for cuff. Use the Jackett search API to find torrents.
# Requires cuff, jq, rofi

err_msg_exit() {
    # Print an error to stderr and exit.
    printf "%s\n" "$*" >&2
    exit 1
}

# Check dependencies
type cuff > /dev/null || err_msg_exit "'cuff' not found."
type jq > /dev/null || err_msg_exit "'jq' not found."
type rofi > /dev/null || err_msg_exit "'rofi' not found."

# User prompt commands
INPUT_CMD=(rofi -dmenu -show -p "Search" -l 0 -i)
MENU_CMD=(rofi -dmenu -show -p "Select" -i)

# Figure out which actions are available
OPEN_URL="${BROWSER:-${OPENER:-xdg-open}}"
OPEN_TORRENT="${OPENER:-xdg-open}"
ACTIONS=()
type "$OPEN_TORRENT" > /dev/null && ACTIONS+=("download")
type "$OPEN_URL" > /dev/null && ACTIONS+=("open")
type webtorrent > /dev/null && ACTIONS+=("stream")

[ -z "${ACTIONS[*]}" ] && err_msg_exit "No actions."

# Action definitions
download() {
    # Download the torrent.
    $OPEN_TORRENT "$(printf "%s" "$1" | jq -r '.MagnetUri//.Link')"
}

open() {
    # Open the torrent's web page.
    local url="$(printf "%s" "$1" | jq -r '.Guid//.Details')"
    [ "$url" = "null" ] && err_msg_exit "Could not get link." || $OPEN_URL "$url"
}

stream() {
    # Stream the torrent with webtorrent.
    local magnet="$(printf "%s" "$1" | jq -r '.MagnetUri//.Link')"
    $TERMINAL -e "webtorrent \'$magnet\' --port 9827 --mpv --not-on-top"
}

# Defaults
TRACKER_ARGS=""
CATEGORY_ARGS=""
STDIN=""
CUFF_ARGS=""

SUBMENU=("Search" "Restrict to trackers" "Restrict to categories")
# Submenus
trackers() {
    # Restrict search to provided trackers.
    local IFS=$'\n'
    local trackers=($(cuff indexers | ${MENU_CMD[@]} -multi-select -mesg 'ESC to clear'))
    [ -n "$trackers" ] && TRACKER_ARGS="$(printf -- "-t %s " ${trackers[@]})" || TRACKER_ARGS=""
}

categories() {
    # Restrict search to provided categories.
    local IFS=$'\n'
    local categories=($(cuff categories | ${MENU_CMD[@]} -multi-select -mesg 'ESC to clear'))
    [ -n "$categories" ] && CATEGORY_ARGS="$(printf -- "-c %s " ${categories[@]})" || CATEGORY_ARGS=""
}

search() {
    # Get search query, create menu and run actions.
    local results
    if [ -n "$STDIN" ]; then
        # Results from stdin
        results="$(cat)"
    else
        # Prompt for search
        local query="$(${INPUT_CMD[@]})"
        results="$(cuff "$CUFF_ARGS" search -s "Peers" "$TRACKER_ARGS" "$CATEGORY_ARGS" "$query")" || exit
    fi

    local IFS=$'\n'
    declare -a results_table=($(\
        printf "%s" "$results" | \
        jq -r '.[] | "\(.Title[:60])\t\(.TrackerId)\t\(.Size)\tðŸ”½\(.Seeders)\tðŸ”¼\(.Peers)\t\(.PublishDate[:10])"' | \
        numfmt --field 3 --to=iec -d$'\t' --invalid=ignore | \
        column --table --separator=$'\t' \
        ))

    selected_indices="$(printf '%s\n' "${results_table[@]}" | ${MENU_CMD[@]} -format 'i' -multi-select)" || exit $?

    # Iterate over selected torrents and run the selected action.
    for index in $selected_indices; do
        local selected_torrent="$(printf "%s" "$results" | jq ".[$index]")"
        local selected_torrent_string="${results_table[$index]}"
        case "$(printf "%s\n" ${ACTIONS[@]} | ${MENU_CMD[@]} -no-custom -l ${#ACTIONS[@]} -mesg "$selected_torrent_string")" in
            "download" )
                download "$selected_torrent"
                ;;
            "open" )
                open "$selected_torrent"
                ;;
            "stream" )
                stream "$selected_torrent"
                ;;
        esac
    done
}

# Pipe a cuff search json output straight to rofi-jackett
# e.g. $ cuff search big buck bunny | rofi-jackett
if [ "$1" = "-" ]; then
    STDIN=1
    search
    exit
else
    # Pass the options to cuff
    # e.g. rofi-cuff -v -v -p password
    CUFF_ARGS="$*"
fi

# Stop execution early if help msg is requested.
while getopts ":h" opt; do
    if [ "${opt}" = "h" ]; then
        # Just show the help msg for the main cuff cmd.
        printf '%s passes any provided to the main cuff command.\n\n' "$(basename "$0")"
        cuff -h | head -n12
        exit 0
    fi
done

# Main loop
DONE=""
while [ -z "$DONE" ]; do
    # Add a msg to the main menu to indicate the selected trackers/categories
    if [ -n "$TRACKER_ARGS" ] || [ -n "$CATEGORY_ARGS" ]; then
        SELECTION="$(\
            printf "%s\n" "${SUBMENU[@]}" | \
            ${MENU_CMD[@]} -no-custom -l ${#SUBMENU[@]} -mesg "Cuff search args: ${TRACKER_ARGS}${CATEGORY_ARGS}" \
            )" || exit $?
    else
        SELECTION="$(\
            printf "%s\n" "${SUBMENU[@]}" | \
            ${MENU_CMD[@]} -no-custom -l ${#SUBMENU[@]} \
            )" || exit $?
    fi
    case "$SELECTION" in
        "Restrict to trackers" )
            trackers
            ;;
        "Restrict to categories" )
            categories
            ;;
        "Search" )
            search
            DONE=1
            ;;
    esac
done
